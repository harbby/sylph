plugins {
  id "com.github.hierynomus.license" version "0.14.0"
  id "com.github.harbby.gradle.serviceloader" version "1.1.5"
  id "jacoco"
}

allprojects {
  group 'ideal'
  version '0.6.0-SNAPSHOT'  //SNAPSHOT

  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'checkstyle'
  apply plugin: 'jacoco'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }
  tasks.withType(ScalaCompile) {
    options.encoding = 'UTF-8'
  }

  ext.deps = [
          flink    : '1.7.2',
          jetty    : "9.4.6.v20170531",   //8.1.17.v20150415   "9.4.6.v20170531"
          hadoop   : "2.7.4",
          hbase    : '1.1.2',
          spark    : "2.4.3",
          scala    : '2.11.8',
          joda_time: '2.9.3',
          slf4j  : '1.7.25',
          guice    : '4.2.1',
          gadtry   : '1.5.0',
          guava    : '25.1-jre',
          jackson  : '2.9.5',
          jersey   : '2.28'
  ]
}

subprojects {
  if (project != rootProject) {
    apply plugin: 'com.github.hierynomus.license'
  }

  configurations {
    testCompile.extendsFrom compileOnly
  }

  repositories {
    mavenLocal()
    //maven{ url 'http://maven.aliyun.com/nexus/content/groups/public'}
    mavenCentral()
  }
  
  dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:2.23.4'
  }

  task clearOutDir(type: Delete) {
    delete project.files('out')
  }
  clean.dependsOn clearOutDir

  jacocoTestReport {
    reports {
      xml.enabled true
      html.enabled true
    }
  }
  check.dependsOn jacocoTestReport

  checkstyle {
    toolVersion '8.12'
    showViolations true
  }

  task checkstyle(type: Checkstyle) {
    configFile = file("${rootProject.projectDir}/src/checkstyle/facebook_checks.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**', '**/test/**', '**/build/**', '**/module-info.java'
    classpath = files()
  }
//    assemble.dependsOn 'checkstyle'

  /* 如果依赖版本冲突 则直接失败策略设置*/
  configurations.all {
    resolutionStrategy { failOnVersionConflict() }
  }
  // ./gradlew sylph-runners:sylph-runner-flink:dependencies

  license {
    headerDefinitions {  //see: http://code.mycila.com/license-maven-plugin/#supported-comment-types
      javadoc_style {
        firstLine = "/*"
        endLine = " */"
        beforeEachLine = " * "
        afterEachLine = ""
        firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
        lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
        allowBlankLines = false
        padLines = false
        //skipLine = "//"
        isMultiline = true
      }
    }
    header rootProject.file('src/license/LICENSE-HEADER.txt')
    strictCheck true
    excludes(["**/*.properties", "**/*.sql"])
    //include "**/*.java"
  }
  //assemble.dependsOn 'licenseMain','licenseTest'
  //licenseMain.includes
  //license.mapping('javascript', 'JAVADOC_STYLE')

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    //javadoc.failOnError = false
  }

  artifacts {
    archives sourcesJar, javadocJar
  }

  javadoc {
    options {
      encoding "UTF-8"
      charSet 'UTF-8'
      author true
      version true
      links "https://harbby.github.io/project/sylph/en/docs/intro/"
      title "sylph"
    }
  }
}
